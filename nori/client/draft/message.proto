syntax = "proto3";

package nori.client.message.v0;

import "common/message.proto";
import "google/protobuf/timestamp.proto";

enum MessageActivity {
  // reference: 
  // - https://discord.com/developers/docs/resources/message#message-object-message-activity-types
  // - https://discord.com/developers/docs/resources/message#message-object-message-types
  UNKNOWN = 0;
  JOIN = 1;
  LEAVE = 2;
  KICK = 3;
  BAN = 4;
  INVITE = 7;
  UNINVITE = 8;
  START = 11;
  END = 12;
  RENAME = 13;
  PIN = 14;
  UNPIN = 15;
  ARCHIVE = 16;
  UNARCHIVE = 17;
  MUTE = 18;
  UNMUTE = 19;
  BLOCK = 20;
  UNBLOCK = 21;

  // change room states ......

  REPORT = 22;
  REACT = 23;
  REPLY = 24;
  FORWARD = 25;
  STAR = 26;
  UNSTAR = 27;
  TYPING = 28;
  READ = 29;
  DELIVERED = 30;
  FAILED = 31;
  SEND = 32;
  RECEIVE = 33;
  DELETE = 34;
  EDIT = 35;
  REACTION = 36;
  MARK_AS_READ = 37;
}

message MessageContent {
  repeated MessageUnit units = 1;
  google.protobuf.Timestamp created_timestamp = 2;
  google.protobuf.Timestamp edited_timestamp = 3; // or use repeated history structure?
  google.protobuf.Timestamp deleted_timestamp = 4;
}

message ReadMark {
  google.protobuf.Timestamp timestamp = 1;
  User user_id = 2;
  bool read = 3; // 新增/撤回已讀
  bool anonymous = 4;
}

// 訊息反應結構
message Reaction {
  oneof content {
    string emoji = 1; // Emoji 表情符號
    string sticker = 2; // 貼圖
  }
  string user_id = 3; // 添加反應的使用者
}

// TODO:
// 1. 完成下面這段(IDs)
// 2. 有些 endpoints 需要驗證, 要相應的設計

/*
IDs => 要再想想
- event id: snowflake id
- server id: no
  server_name: same as [Matrix spec](https://spec.matrix.org/v1.11/appendices/#server-name)
- user id: snowflake id? 之後要想搬家過程
  username: user_name@server_name => email-like format
- room id: snowflake id
  room_name: room_name:server_name (or just not include server_name?)
- message id: snowflake_id
  message URL: server_url/room/room_id/message_id (or more compact form?)

- session id: snowflake id
- token: username snowflake ??
*/

message Message {  // message class
  bytes message_id = 1; // snowflake ID ? use room id inside ?
  bytes room_id = 2; // snowflake ID

  bytes sender_id = 3; // snowflake ID
  optional bytes inner_sender_id = 4; // snowflake ID, 大帳內部人員 ID, encrypted
  
  optional SourceNetwork source_network = 5; // 語源網路, 定義為 enum, 預設為 NORI
  optional bytes webhook_id = 6; // snowflake ID, webhook ID, the message is generated by webhook, encrypted

  oneof content {
    MessageActivity activity = 7; // 活動訊息
    MessageContent content = 8; // 一般訊息
  }
  repeated Reaction reactions = 9;
  repeated ReadMark read_marks = 10;
  bool pinned = 11;
}
