syntax = "proto3";

package nori.client.role.v0;

import "google/protobuf/timestamp.proto";
import "google/protobuf/color.proto";

// 傳送訊息的請求
message SendMessageRequest {
  string room_id = 1;
  string sender_id = 2;
  MessageContent content = 3;
}

// 傳送訊息的回應
message SendMessageResponse {
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2; // 發送時間
}

// 接收訊息的請求
message ReceiveMessageRequest {
  string receiver_id = 1;
}

// 接收訊息的回應
message ReceiveMessageResponse {
  repeated nori.common.message.v0.Message messages = 1;
}

// 編輯訊息的請求
message EditMessageRequest {
  string message_id = 1;
  nori.common.message.v0.MessageContent new_content = 2;
}

// 編輯訊息的回應
message EditMessageResponse {
  // 空，使用 gRPC 狀態碼處理成功或錯誤
}

// 刪除訊息的請求
message DeleteMessageRequest {
  string message_id = 1;

  // 要求刪除的人, 預設為自己
}

// 刪除訊息的回應
message DeleteMessageResponse {
  // 空，使用 gRPC 狀態碼處理成功或錯誤
}

// 新增反應的請求
message AddReactionRequest {
  bytes room_id = 1; // not encrypted

  bytes message_id = 2; // encrypted
  bytes user_id = 3; // 新增的人, encrypted
  string emoji = 4; // encrypted
}

// 新增反應的回應
message AddReactionResponse {
  // 空，使用 gRPC 狀態碼處理成功或錯誤
}

// 刪除反應的請求
message RemoveReactionRequest {
  bytes room_id = 1; // not encrypted

  bytes message_id = 2; // encrypted
  bytes user_id = 3; // 原本新增的人, encrypted
  // 刪除的人, 預設為新增的人自己, encrypted
  string emoji = 4; // encrypted
}

// 刪除反應的回應
message RemoveReactionResponse {
  // 空，使用 gRPC 狀態碼處理成功或錯誤
}

// 標記訊息為已讀的請求
message MarkMessageAsReadRequest {
  bytes room_id = 1; // not encrypted

  bytes message_id = 2; // snowflake, encrypted
  bytes user_id = 3; // snowflake, encrypted
  bool read = 4; // 標記/取消已讀, encrypted
  bool anonymous = 5; // 是否匿名, encrypted
}

// 標記訊息為已讀的回應
message MarkMessageAsReadResponse {
  // 空，使用 gRPC 狀態碼處理成功或錯誤
}

// 訊息服務
service MessageService {
  // 傳送訊息
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);

  // 接收訊息
  rpc ReceiveMessage(ReceiveMessageRequest) returns (ReceiveMessageResponse);

  // 編輯訊息
  rpc EditMessage(EditMessageRequest) returns (EditMessageResponse);

  // 刪除訊息
  rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse);

  // 新增反應
  rpc AddReaction(AddReactionRequest) returns (AddReactionResponse);
  
  // 刪除反應
  rpc RemoveReaction(RemoveReactionRequest) returns (RemoveReactionResponse);

  // 訊息已讀
  rpc MarkMessageAsRead(MarkMessageAsReadRequest) returns (MarkMessageAsReadResponse);
}
  