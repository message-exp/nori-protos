syntax = "proto3";

package nori.client.room.v0;

import "common/types.proto";
import "google/protobuf/timestamp.proto";

// Enum for Room states
enum RoomState {
  ACTIVE = 0;
  ARCHIVED = 1;
  BANNED = 2;
}

// Room member structure
message RoomMember {
  string id = 1; // UUID
  string nickname = 2;
  repeated string roles = 3; // Member roles, array of strings
}

// Room permission structure
message RoomPermission {
  string member_role = 1; // Member or role
  map<string, string> permissions = 2; // Category and permissions (bool or other types)
}

// Main Room structure
message Room {
  string id = 1; // UUID
  string name = 2;
  string description = 3;
  repeated RoomPermission permissions = 4;
  repeated RoomMember members = 5;
  string parent_room_id = 6; // UUID of the parent room
  string category_id = 7; // UUID of the category
  RoomState state = 8; // Room state (ACTIVE, ARCHIVED, BANNED)
  google.protobuf.Timestamp created_at = 9; // 創建時間
  google.protobuf.Timestamp updated_at = 10; // 更新時間
  // repeated string pinned_message_id = 11; // UUID of the pinned message
  // int32 slowmode_cooldown = 12; // Slowmode cooldown in seconds
  // string default_notification = 13; // Notification setting: all/mention/none
  // int32 notification_cooldown = 14; // Notification cooldown
}

// 創建聊天室的請求
message CreateRoomRequest {
  string room_name = 1;
  repeated string member_ids = 2; // 參與者 ID 列表
}

// 創建聊天室的回應
message CreateRoomResponse {
  string room_id = 1;
  google.protobuf.Timestamp created_at = 2;
}

// 創建子聊天室的請求
message CreateSubRoomRequest {
  string parent_room_id = 1;
  string name = 2;
}

// 創建子聊天室的回應
message CreateSubRoomResponse {
  Room sub_room = 1;
  google.protobuf.Timestamp created_at = 2;
}

// 更新聊天室狀態的請求
message UpdateRoomStatusRequest {
  string room_id = 1;
  RoomState new_state = 2;
}

// 更新聊天室狀態的回應
message UpdateRoomStatusResponse {
  // 空，使用 gRPC 狀態碼處理成功或錯誤
}

// Join room request
message JoinRoomRequest {
  string room_id = 1;
  string user_id = 2; // UUID of the user joining
}

// Join room response
message JoinRoomResponse {
  // 空，使用 gRPC 狀態碼處理成功或錯誤
}

// Leave room request
message LeaveRoomRequest {
  string room_id = 1;
  string user_id = 2;
}

// Leave room response
message LeaveRoomResponse {
  // 空，使用 gRPC 狀態碼處理成功或錯誤
}

// Invite user request
message InviteUserRequest {
  string room_id = 1;
  string user_id = 2;
}

// Invite user response
message InviteUserResponse {
  // 空，使用 gRPC 狀態碼處理成功或錯誤
}

// Kick user request
message KickUserRequest {
  string room_id = 1;
  string user_id = 2;
}

// Kick user response
message KickUserResponse {
  // 空，使用 gRPC 狀態碼處理成功或錯誤
}

// Ban user request
message BanUserRequest {
  string room_id = 1;
  string user_id = 2;
}

// Ban user response
message BanUserResponse {
  // 空，使用 gRPC 狀態碼處理成功或錯誤
}

// Delete room request
message DeleteRoomRequest {
  string room_id = 1;
}

// Delete room response
message DeleteRoomResponse {
  // 空，使用 gRPC 狀態碼處理成功或錯誤
}

// Change room name request
message ChangeRoomNameRequest {
  string room_id = 1;
  string new_name = 2;
}

// Change room name response
message ChangeRoomNameResponse {
  // 空，使用 gRPC 狀態碼處理成功或錯誤
}

// Change room description request
message ChangeRoomDescriptionRequest {
  string room_id = 1;
  string new_description = 2;
}

// Change room description response
message ChangeRoomDescriptionResponse {
  // 空，使用 gRPC 狀態碼處理成功或錯誤
}

// Change room permission request
message ChangeRoomPermissionRequest {
  string room_id = 1;
  RoomPermission permission = 2;
}

// Change room permission response
message ChangeRoomPermissionResponse {
  // 空，使用 gRPC 狀態碼處理成功或錯誤
}

// 聊天室服務
service RoomService {
  rpc CreateRoom(CreateRoomRequest) returns (CreateRoomResponse);
  rpc CreateSubRoom(CreateSubRoomRequest) returns (CreateSubRoomResponse);
  rpc UpdateRoomStatus(UpdateRoomStatusRequest) returns (UpdateRoomStatusResponse);
  rpc JoinRoom(JoinRoomRequest) returns (JoinRoomResponse);
  rpc LeaveRoom(LeaveRoomRequest) returns (LeaveRoomResponse);
  rpc InviteUser(InviteUserRequest) returns (InviteUserResponse);
  rpc KickUser(KickUserRequest) returns (KickUserResponse);
  rpc BanUser(BanUserRequest) returns (BanUserResponse);
  rpc DeleteRoom(DeleteRoomRequest) returns (DeleteRoomResponse);
  rpc ChangeRoomName(ChangeRoomNameRequest) returns (ChangeRoomNameResponse);
  rpc ChangeRoomDescription(ChangeRoomDescriptionRequest) returns (ChangeRoomDescriptionResponse);
  rpc ChangeRoomPermission(ChangeRoomPermissionRequest) returns (ChangeRoomPermissionResponse);
}
