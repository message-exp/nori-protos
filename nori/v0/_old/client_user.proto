/**
 * NORI API 0.1
 */

syntax = "proto3";

package nori.v0;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

/**
 * The state of the user account.
 */
// enum UserState {
//   USER_STATE_UNKOWN = 0;
//   USER_STATE_ACTIVE = 1;
//   USER_STATE_UNACTIVATED = 2;
//   USER_STATE_RESTRICTED = 3; // Cannot do something
//   USER_STATE_SUSPENDED = 4; // Cannot do anything
//   USER_STATE_ARCHIVED = 5;
//   USER_STATE_DELETED = 6;
// }

message LoginByEmailPasswordRequest {
  string email = 1;
  string password = 2;
}

message LoginResponse {
  string token = 2;
  google.protobuf.Timestamp expires = 3;
}

message LogoutRequest {
  string user_id = 1; // ?
  string token = 2;
}

message RegisterUserRequest {
  string name = 1;
  string email = 2;
}

message RegisterUserResponse {
  string user_id = 1;
  string username = 2;
  string token = 3;
}

message DeleteUserRequest {
  string user_id = 1;
  string token = 2;
}

message DeleteUserResponse {
  google.protobuf.Timestamp will_delete = 1; // delete in this time if not canceled
}

message ChangeUserKeyRequest {
  string user_id = 1;
  string token = 2;
  string new_pub_key = 3;
}


/**
 * Client-Server API for user management.
 */
service ClientUser {
  // rpc GetUserKeyBundle (GetUserKeyBundleRequest) returns (GetUserKeyBundleResponse);
  rpc ChangeUserKey (ChangeUserKeyRequest) returns (google.protobuf.Empty);

  rpc RegisterUser (RegisterUserRequest) returns (RegisterUserResponse);
  rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse);
  // rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse); // tear into smaller parts?

  // TODO: multiple login methods, And it needs global rate limit
  rpc LoginByEmailPassword (LoginByEmailPasswordRequest) returns (LoginResponse); // needs global rate limit
  rpc Logout (LogoutRequest) returns (google.protobuf.Empty);

  // contacts (reference: vCard format)
  // rpc AddContact (AddContactRequest) returns (AddContactResponse);
  // rpc UpdateContact (UpdateContactRequest) returns (UpdateContactResponse);
  // rpc RemoveContact (RemoveContactRequest) returns (RemoveContactResponse);
  // rpc BlockUser (BlockUserRequest) returns (BlockUserResponse); // ?
  // rpc UnblockUser (UnblockUserRequest) returns (UnblockUserResponse); // ?

  // TODO: change home server
}
