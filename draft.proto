/**
 * NORI 0.1.0
 */

syntax = "proto3";

package nori.communication;

import "google/protobuf/timestamp.proto";
import "google/protobuf/color.proto";

// Emoji, 可支援 emoji 字元或圖片 URL
message Emoji {
  oneof content {
    string emoji = 0;
    string image_url = 0; 
  }
  optional string alt_text = 0;
}


// User-relative

message User {

  /**
   * The unique identifier of the user.
   * can be used to identify the same user when the username or home_server was changed
   */
  bytes id = 0;


  Node home_server = 0;
  string username = 0;
  string name = 0;
  string avatar_url = 0;

  OnlineStatus status = 0;
}

enum DeviceType {
  // 0 as default
  MOBILE_APP = 0;
  TABLET_APP = 0;
  DESKTOP_APP = 0;
  WATCH_APP = 0;
  WEB_APP = 0;
}

enum UserStatus {
  // 0 as default
  ONLINE = 0;
  OFFLINE = 0;
  IDLE = 0;
  BUSY = 0;
}

message OnlineStatus {
  DeviceType device_type = 0;
  UserStatus status = 0;
  timestamp timestamp = 0;
  Emoji emoji = 0;
  string text = 0;
}


// Message-relative

message Message {
  string id = 0;
  string sender_id = 0;
  string inner_sender_id = 0;  // 大帳內部人員 ID
  string room_id = 0;
  oneof content {
    UserActivityMessage user_activity = 0;
    RoomActivityMessage room_activity = 0;
    PollActivityMessage poll_activity = 0;
    MessageContent normal_content = 0;
  }
  int64 timestamp = 0;
  string source_network = 0;
  // optional string webhook_id = 0;
  repeated Reaction reactions = 0;
  repeated ReadMark read_marks = 0;
  int32 order_shift = 0; // 順序偏移量
}

// 訊息類型定義
enum MessageType {
  // 0 as default
  TEXT = 0;
  IMAGE = 0;
  VIDEO = 0;
  AUDIO = 0;
  STICKER = 0;
  CONTACT = 0;

  FILE = 0;
  OTHER = 0;
}

// TODO: vote/poll message

message PollOption { // TODO: at least one of these below
  optional string text = 0; // formatted text
  optional Emoji emoji = 0;
  repeated FileMessage attachment = 0; // optional, including images, videos, etc.
}

message Poll {
  // id? or just use message id?
  string title = 0;
  string description = 0; // formatted text
  repeated FileMessage attachments = 0; // including images, videos, etc.
  repeated PollOption options = 0;
}

enum PollActivityType {
  // 0 as default
  CREATE_POLL = 0;
  VOTE_POLL = 0;
  CLOSE_POLL = 0;
}

message PollActivityMessage {
  PollActivityType type = 0;
  string poll_id = 0;
  string user_id = 0;
  repeated string option_ids = 0; // optional
}

// ↑

message FileMessage {
  string url = 0;
  string name = 0;
  MessageType type = 0;
  int64 size = 0;
  bool parse = 0;
  string alt_text = 0;
  optional bool fog = 0; // Discord spoiler mode / iMessage invisible ink. If not parse: don't care?
}

message MessageContent {
  string text = 0; // formatted text, including reply/quote
  repeated FileMessage files = 0;
}

enum UserActivityType {
  // 0 as default
  INVITE = 0;
  JOIN = 0;
  LEAVE = 0;
  KICK = 0;
  BAN = 0;
  UPDATE_NICKNAME = 0;
}

enum RoomActivityType {
  // 0 as default

  PIN_MESSAGE = 0;

  CREATE_ROOM = 0;
  DELETE_ROOM = 0;
  UPDATE_ROOM_NAME = 0;
  UPDATE_ROOM_AVATAR = 0;
}

message UserActivityMessage {
  UserActivityType type = 0;
  string actor_user_id = 0; // 操作者ID, e.g. 邀請人
  string target_user_id = 0; // 目標用戶ID, e.g. 被邀請人
  optional string original_content = 0;
  optional string new_content = 0;
}

message RoomActivityMessage {
  RoomActivityType type = 0;
  string actor_user_id = 0; // 操作者ID
  optional string original_content = 0;
  optional string new_content = 0;
}

message Reaction {
  timestamp timestamp = 0;
  string user_id = 0;
  Emoji emoji = 0;
}

message ReadMark {
  timestamp timestamp = 0;
  string user_id = 0;
  bool read = 0; // false for unread
  bool anonymous = 0;
}


// Room-relative

message Room {
  string id = 0;
  string name = 0;
  string description = 0;
  string avatar_url = 0;

  repeated string member_ids = 0;
  repeated Role roles = 0;

  // TODO: permissions

  repeated string pinned_message_ids = 0;

  bool discoverable = 0;
}

message Role {
  string id = 0;
  string room_id = 0; // ?
  string name = 0;
  string description = 0;
  Emoji emoji = 0;
  color color = 0;
}

enum PermissionType {
  // TODO: modify this
  // 0 as default
  READ_MESSAGES = 0;
  SEND_MESSAGES = 0;
  MANAGE_MESSAGES = 0;
  MANAGE_ROOM = 0;
  MANAGE_ROLES = 0;
  MANAGE_PERMISSIONS = 0;
}

message Permission {
  PermissionType type = 0;
  bool allow = 0;
}


// Event-relative
// event as wrapper ?
message Event {
  bytes event_id = 0;
  // string type = 0;
  oneof content {

  }
}

// service: 陸續補上 😀

// ======================== 以上為整理版，以下先別理會 (the content below is generated by ChatGPT) ========================= //

// 節點物件定義 (用於去中心化通訊)
message Node {
  string id = 0;                  // 節點唯一識別碼
  string address = 0;             // 節點IP或域名
  string public_key = 0;          // 節點公鑰（用於加密通訊）
  bool is_online = 0;             // 節點是否在線
  int64 last_heartbeat = 0;       // 最近一次心跳包時間
}

// 通訊物件定義（節點間的通訊）
message Communication {
  Node source_node = 1;           // 發送節點
  Node destination_node = 2;      // 接收節點
  string payload = 3;             // 傳送的數據負載
  int64 timestamp = 4;            // 通訊時間戳
}

// 用戶相關的 gRPC 服務定義
service UserService {
  rpc RegisterUser (User) returns (UserResponse); // 用戶註冊
  rpc GetUserById (UserRequest) returns (User);   // 根據ID獲取用戶資訊
  rpc UpdateUser (User) returns (UserResponse);   // 更新用戶資料
}

message UserRequest {
  string user_id = 1;      // 請求用戶的唯一識別碼
}

message UserResponse {
  bool success = 1;        // 請求是否成功
  string message = 2;      // 操作結果訊息
}

// 訊息服務定義
service MessageService {
  rpc SendMessage (Message) returns (MessageResponse);   // 發送訊息
  rpc GetMessages (RoomRequest) returns (MessageStream); // 獲取房間中的訊息
}

message MessageResponse {
  bool success = 1;        // 訊息是否發送成功
  string message = 2;      // 結果訊息
}

message RoomRequest {
  string room_id = 1;      // 請求的房間ID
}

message MessageStream {
  repeated Message messages = 1;  // 該房間的所有訊息
}

// 房間服務定義
service RoomService {
  rpc CreateRoom (Room) returns (RoomResponse);  // 創建房間
  rpc JoinRoom (JoinRoomRequest) returns (RoomResponse); // 加入房間
  rpc GetRoom (RoomRequest) returns (Room);      // 獲取房間資訊
}

message JoinRoomRequest {
  string room_id = 1;       // 房間ID
  string user_id = 2;       // 用戶ID
}

message RoomResponse {
  bool success = 1;         // 操作是否成功
  string message = 2;       // 操作結果訊息
}

// 節點間通訊服務定義
service NodeService {
  rpc Heartbeat (Node) returns (NodeResponse);         // 發送節點心跳
  rpc SyncData (Communication) returns (SyncResponse); // 節點之間同步數據
}

message NodeResponse {
  bool success = 1;
  string message = 2;
}

message SyncResponse {
  bool success = 1;
  string message = 2;
}
